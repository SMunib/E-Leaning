import React, { useState, useEffect } from 'react';
import "./Courses.css";
import ReactPlayer from 'react-player'

const Courses = ({  userType }) => {
  const [enrolledCourses, setEnrolledCourses] = useState([]);
  const [availableCourses, setAvailableCourses] = useState([]);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [loading, setLoading] = useState(true);
  const [moduleVideos, setModuleVideos] = useState([]);
  const [newVideoUrl, setNewVideoUrl] = useState('');
  

  useEffect(() => {
    const fetchData = async () => {
      
      if(userType === "teacher"){
      try {
        const token = localStorage.getItem('token');
        // Replace 'https://api.example.com/enrolled-courses' with your actual API endpoint for fetching enrolled courses
        const enrolledResponse = await fetch('http://localhost:2000/reg_course/findforteacher', {
          method: 'GET',
          headers: {
            'Authorization': Bearer ${token},
          }
        });
        const enrolledData = await enrolledResponse.json();
        if (enrolledData.success) {
          setEnrolledCourses(enrolledData.data);
          console.log(enrolledData.data);
        } else { 
          // alert("error"); 
        }
        // Replace 'https://api.example.com/available-courses' with your actual API endpoint for fetching available courses
        // const availableResponse = await fetch('http://localhost:2000/course/find', {
        //   method: 'GET',
        //   headers: {
        //     'Authorization': Bearer ${token},
        //   }
        // });
        // const availableData = await availableResponse.json();
        // if (availableData.success) {
        //   setAvailableCourses(availableData.data);
        //   // console.log(availableData.length);
        //   // console.log(availableData.success);
        // } else { alert("Error"); }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false);
      }
    }else if(userType === "student"){
      try {
        const token = localStorage.getItem('token');
        // Replace 'https://api.example.com/enrolled-courses' with your actual API endpoint for fetching enrolled courses
        const enrolledResponse = await fetch('http://localhost:2000/reg_course/findforstudent', {
          method: 'GET',
          headers: {
            'Authorization': Bearer ${token},
          }
        });
        const enrolledData = await enrolledResponse.json();
        if (enrolledData.success) {
          setEnrolledCourses(enrolledData.data);
          console.log(enrolledData.data);
        } else { 
          // alert("error"); 
        }
        // Replace 'https://api.example.com/available-courses' with your actual API endpoint for fetching available courses
        // const availableResponse = await fetch('http://localhost:2000/course/find', {
        //   method: 'GET',
        //   headers: {
        //     'Authorization': Bearer ${token},
        //   }
        // });
        // const availableData = await availableResponse.json();
        // if (availableData.success) {
        //   setAvailableCourses(availableData.data);
        //   // console.log(availableData.length);
        //   // console.log(availableData.success);
        // } else { alert("Error"); }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false);
      }
    }
  };
    fetchData();
  }, []); // The empty dependency array ensures that useEffect runs only once

  // useEffect(() => {
  //   // This effect will run when enrolledCourses changes
  //   if (enrolledCourses.length > 0) {
  //     console.log('Enrolled courses exist:', enrolledCourses);
  //   } else {
  //     console.log('No enrolled courses.');
  //   }
  // }, [enrolledCourses]);

  const handleCourseClick = (course) => {
    // Set the selected course
    setSelectedCourse(course);
  
    // Initialize the videos array for each module
    const initialModuleVideos = Array.from({ length: course.modules }, () => []);
    setModuleVideos(initialModuleVideos);
  };

  const handleGoBack = () => {
    setSelectedCourse(null);
    setActiveOption(null);
  };
  const handleAddVideo = (index) => {
    // Update the videos for the specified module by adding a new video
    const updatedModuleVideos = [...moduleVideos];
    updatedModuleVideos[index] = [...updatedModuleVideos[index], newVideoUrl];
    setModuleVideos(updatedModuleVideos);

    // Clear the input field after adding the video
    setNewVideoUrl('');
  };
  const handleRemoveVideo = (moduleIndex, videoIndex) => {
    // Update the videos for the specified module by removing the video at the given index
    const updatedModuleVideos = [...moduleVideos];
    updatedModuleVideos[moduleIndex].splice(videoIndex, 1);
    setModuleVideos(updatedModuleVideos);
  };

  return (
    <div className="courses">
      {selectedCourse ? (
        <div>
          <h2>{selectedCourse.CourseName}</h2>
          <p>Course Details: {selectedCourse.details}</p>
          <p>Course Code: {selectedCourse.CourseID}</p>
          <p>Course Modules: {selectedCourse.modules} </p>
          <p>Course Duration: {selectedCourse.duration}</p>
          {typeof selectedCourse.modules === 'number' && selectedCourse.modules > 0 ? (
      <div>
        <h3>Course Modules:</h3>
        {/* Use a loop to generate the specified number of headings */}
        {[...Array(selectedCourse.modules)].map((_, moduleIndex) => (
    <div key={moduleIndex}>
      <h4>Module {moduleIndex + 1}</h4>
            {/* <p>Module Number: {index+1}</p> */}
            {userType === "teacher" && (
        <form className='Url Form'>
          <label>Enter Youtube URL</label>
          <input
            type='text'
            placeholder='Enter Youtube URL'
            required
            value={newVideoUrl}
            onChange={(e) => setNewVideoUrl(e.target.value)}
          />
          <button type='button' onClick={() => handleAddVideo(moduleIndex)}>
            Add video
          </button>
        </form>
      )}

      {/* Render all videos for the current module */}
      {moduleVideos[moduleIndex].map((videoUrl, videoIndex) => (
        <div key={videoIndex}>
          <ReactPlayer url={videoUrl} />
          {userType === "teacher" && (
            <button
              type='button'
              onClick={() => handleRemoveVideo(moduleIndex, videoIndex)}
            >
              Remove video
            </button>
          )}
        </div>
      ))}
            <p>Quiz {moduleIndex + 1}: </p>
            {/* Add more details for each module if needed */}
            {/* Additional module details go here */}
          </div>
        ))}
      </div>
    ) : (
      <p>No modules available for this course.</p>
    )}

          {/* Add more course details here */}
          <button onClick={handleGoBack}>Go Back</button>
        </div>
      ) : (
        <div>
          <section>
            <h2>Enrolled Courses</h2>
            {loading ? (
              <p>Loading enrolled courses...</p>
            ) : Object.keys(enrolledCourses).length > 0 ? (
              <ul>
                {enrolledCourses.map((course) => (
                  <li key={course.CourseID} onClick={() => handleCourseClick(course)}>
                    {course.C_Name}
                  </li>
                ))}
              </ul>
              
            ) : (
              <p>No courses enrolled yet.</p>
            )}
          </section>
        </div>
      )}
    </div>
  );
};

export defaultÂ Courses;

{/* <button onClick={handleShowVideos}>Videos</button> */}
        {/* {moduleVideos.map((videos, moduleIndex) => (
            <div key={moduleIndex}>
              <h4>Module {moduleIndex + 1}</h4>

              {/* Render all videos for the current module */}
              {/* {videos.map((videoUrl, videoIndex) => (
                <div key={videoIndex}>
                  <ReactPlayer url={videoUrl} />
                </div> */}
              {/* // ))} */} */}
            {/* // </div> */}
          {/* // ))} */}
